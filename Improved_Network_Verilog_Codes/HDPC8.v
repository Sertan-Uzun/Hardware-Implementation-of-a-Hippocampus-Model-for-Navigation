// -------------------------------------------------------------
// 
// File Name: C:\Users\Sertan\Desktop\Simulink_Model\Verilog_Codes\Improved_Network_Model\HDPC8.v
// Created: 2025-07-05 12:04:45
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: HDPC8
// Source Path: Improved_Network_Model/HDPC8
// Hierarchy Level: 1
// Model version: 1.37
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module HDPC8
          (clk,
           reset,
           enb,
           g_e_0,
           g_e_1,
           g_e_2,
           g_e_3,
           g_e_4,
           g_e_5,
           g_e_6,
           g_e_7,
           g_i_0,
           g_i_1,
           g_i_2,
           g_i_3,
           g_i_4,
           g_i_5,
           g_i_6,
           g_i_7,
           g);


  input   clk;
  input   reset;
  input   enb;
  input   signed [31:0] g_e_0;  // sfix32_En25
  input   signed [31:0] g_e_1;  // sfix32_En25
  input   signed [31:0] g_e_2;  // sfix32_En25
  input   signed [31:0] g_e_3;  // sfix32_En25
  input   signed [31:0] g_e_4;  // sfix32_En25
  input   signed [31:0] g_e_5;  // sfix32_En25
  input   signed [31:0] g_e_6;  // sfix32_En25
  input   signed [31:0] g_e_7;  // sfix32_En25
  input   signed [15:0] g_i_0;  // sfix16_En8
  input   signed [15:0] g_i_1;  // sfix16_En8
  input   signed [15:0] g_i_2;  // sfix16_En8
  input   signed [15:0] g_i_3;  // sfix16_En8
  input   signed [15:0] g_i_4;  // sfix16_En8
  input   signed [15:0] g_i_5;  // sfix16_En8
  input   signed [15:0] g_i_6;  // sfix16_En8
  input   signed [15:0] g_i_7;  // sfix16_En8
  output  signed [15:0] g;  // sfix16_En8


  wire signed [31:0] Sum_of_Elements_stage2_add_temp;  // sfix32_En25
  wire signed [32:0] Sum_of_Elements_op_stage1;  // sfix33_En25
  wire signed [31:0] Sum_of_Elements_stage3_add_cast;  // sfix32_En25
  wire signed [31:0] Sum_of_Elements_stage3_add_temp;  // sfix32_En25
  wire signed [33:0] Sum_of_Elements_op_stage2;  // sfix34_En25
  wire signed [31:0] Sum_of_Elements_stage4_add_cast;  // sfix32_En25
  wire signed [31:0] Sum_of_Elements_stage4_add_temp;  // sfix32_En25
  wire signed [34:0] Sum_of_Elements_op_stage3;  // sfix35_En25
  wire signed [31:0] Sum_of_Elements_stage5_add_cast;  // sfix32_En25
  wire signed [31:0] Sum_of_Elements_stage5_add_temp;  // sfix32_En25
  wire signed [35:0] Sum_of_Elements_op_stage4;  // sfix36_En25
  wire signed [31:0] Sum_of_Elements_stage6_add_cast;  // sfix32_En25
  wire signed [31:0] Sum_of_Elements_stage6_add_temp;  // sfix32_En25
  wire signed [36:0] Sum_of_Elements_op_stage5;  // sfix37_En25
  wire signed [31:0] Sum_of_Elements_stage7_add_cast;  // sfix32_En25
  wire signed [31:0] Sum_of_Elements_stage7_add_temp;  // sfix32_En25
  wire signed [37:0] Sum_of_Elements_op_stage6;  // sfix38_En25
  wire signed [31:0] Sum_of_Elements_stage8_add_cast;  // sfix32_En25
  wire signed [31:0] Sum_of_Elements_out1;  // sfix32_En25
  wire [7:0] count_step;  // uint8
  wire [7:0] count_from;  // uint8
  wire signed [15:0] Constant3_out1;  // sfix16_En8
  wire signed [15:0] Constant1_out1;  // sfix16_En8
  wire signed [31:0] Sum_of_Elements1_stage2_add_cast;  // sfix32_En8
  wire signed [31:0] Sum_of_Elements1_stage2_add_cast_1;  // sfix32_En8
  wire signed [31:0] Sum_of_Elements1_stage2_add_temp;  // sfix32_En8
  wire signed [16:0] Sum_of_Elements1_op_stage1;  // sfix17_En8
  wire signed [31:0] Sum_of_Elements1_stage3_add_cast;  // sfix32_En8
  wire signed [31:0] Sum_of_Elements1_stage3_add_cast_1;  // sfix32_En8
  wire signed [31:0] Sum_of_Elements1_stage3_add_temp;  // sfix32_En8
  wire signed [17:0] Sum_of_Elements1_op_stage2;  // sfix18_En8
  wire signed [31:0] Sum_of_Elements1_stage4_add_cast;  // sfix32_En8
  wire signed [31:0] Sum_of_Elements1_stage4_add_cast_1;  // sfix32_En8
  wire signed [31:0] Sum_of_Elements1_stage4_add_temp;  // sfix32_En8
  wire signed [18:0] Sum_of_Elements1_op_stage3;  // sfix19_En8
  wire signed [31:0] Sum_of_Elements1_stage5_add_cast;  // sfix32_En8
  wire signed [31:0] Sum_of_Elements1_stage5_add_cast_1;  // sfix32_En8
  wire signed [31:0] Sum_of_Elements1_stage5_add_temp;  // sfix32_En8
  wire signed [19:0] Sum_of_Elements1_op_stage4;  // sfix20_En8
  wire signed [31:0] Sum_of_Elements1_stage6_add_cast;  // sfix32_En8
  wire signed [31:0] Sum_of_Elements1_stage6_add_cast_1;  // sfix32_En8
  wire signed [31:0] Sum_of_Elements1_stage6_add_temp;  // sfix32_En8
  wire signed [20:0] Sum_of_Elements1_op_stage5;  // sfix21_En8
  wire signed [31:0] Sum_of_Elements1_stage7_add_cast;  // sfix32_En8
  wire signed [31:0] Sum_of_Elements1_stage7_add_cast_1;  // sfix32_En8
  wire signed [31:0] Sum_of_Elements1_stage7_add_temp;  // sfix32_En8
  wire signed [21:0] Sum_of_Elements1_op_stage6;  // sfix22_En8
  wire signed [31:0] Sum_of_Elements1_stage8_add_cast;  // sfix32_En8
  wire signed [31:0] Sum_of_Elements1_stage8_add_cast_1;  // sfix32_En8
  wire signed [31:0] Sum_of_Elements1_stage8_add_temp;  // sfix32_En8
  wire signed [15:0] Sum_of_Elements1_out1;  // sfix16_En8
  wire signed [15:0] Constant2_out1;  // sfix16_En8
  wire signed [15:0] Constant_out1;  // sfix16_En8
  reg signed [15:0] v_past;  // sfix16_En8
  wire signed [31:0] Add2_sub_cast;  // sfix32_En8
  wire signed [31:0] Add2_sub_cast_1;  // sfix32_En8
  wire signed [31:0] Add2_sub_temp;  // sfix32_En8
  wire signed [15:0] Add2_out1;  // sfix16_En8
  wire signed [31:0] Add4_sub_cast;  // sfix32_En8
  wire signed [31:0] Add4_sub_cast_1;  // sfix32_En8
  wire signed [31:0] Add4_sub_temp;  // sfix32_En8
  wire signed [15:0] Add4_out1;  // sfix16_En8
  wire signed [31:0] Product1_out1;  // sfix32_En16
  wire signed [63:0] Gain2_out1;  // sfix64_En49
  reg [7:0] Refractory_Counter_out1;  // uint8
  wire [7:0] count;  // uint8
  wire need_to_wrap;
  wire [7:0] count_value;  // uint8
  wire Refractory_Counter_out1_is_not0;
  wire Compare_To_Constant_out1;
  wire Logical_Operator_out1;
  wire [7:0] count_1;  // uint8
  wire switch_compare_1;
  wire signed [15:0] v;  // sfix16_En8
  wire signed [15:0] Switch_out1;  // sfix16_En8
  wire signed [31:0] Add3_sub_cast;  // sfix32_En8
  wire signed [31:0] Add3_sub_cast_1;  // sfix32_En8
  wire signed [31:0] Add3_sub_temp;  // sfix32_En8
  wire signed [15:0] Add3_out1;  // sfix16_En8
  wire signed [47:0] Product_out1;  // sfix48_En33
  wire signed [95:0] Gain1_out1;  // sfix96_En82
  wire signed [95:0] Add1_stage2_cast;  // sfix96_En81
  wire signed [95:0] Add1_stage2_cast_1;  // sfix96_En81
  wire signed [95:0] Add1_stage2_sub_cast;  // sfix96_En81
  wire signed [95:0] Add1_stage2_sub_temp;  // sfix96_En81
  wire signed [97:0] Add1_op_stage1;  // sfix98_En82
  wire signed [95:0] Add1_stage3_sub_cast;  // sfix96_En81
  wire signed [95:0] Add1_stage3_sub_cast_1;  // sfix96_En81
  wire signed [95:0] Add1_out1;  // sfix96_En81
  wire signed [191:0] Gain_mul_temp;  // sfix192_En184
  wire signed [15:0] Gain_out1;  // sfix16_En8
  wire signed [31:0] Add_add_cast;  // sfix32_En8
  wire signed [31:0] Add_add_cast_1;  // sfix32_En8
  wire signed [31:0] Add_add_temp;  // sfix32_En8
  wire [7:0] count_step_1;  // uint8
  wire [7:0] count_from_1;  // uint8
  reg [7:0] HDL_Counter1_out1;  // uint8
  wire [7:0] count_2;  // uint8
  wire need_to_wrap_1;
  wire [7:0] count_value_1;  // uint8
  wire HDL_Counter1_out1_is_not0;
  wire Logical_Operator2_out1;
  wire [7:0] count_3;  // uint8
  reg  Delay1_out1;
  wire [7:0] count_step_2;  // uint8
  wire [7:0] count_from_2;  // uint8
  wire [7:0] count_reset;  // uint8
  reg [7:0] HDL_Counter_out1;  // uint8
  wire [7:0] count_4;  // uint8
  wire need_to_wrap_2;
  wire [7:0] count_value_2;  // uint8
  wire HDL_Counter_out1_is_not0;
  wire Logical_Operator1_out1;
  wire [7:0] count_5;  // uint8
  wire [7:0] count_6;  // uint8
  wire switch_compare_1_1;
  wire [7:0] prelookup_idx;  // uint8
  wire signed [15:0] alpha1_D_Lookup_Table_1 [0:201];  // sfix16_En8 [202]
  wire signed [15:0] alpha1_D_Lookup_Table_out1;  // sfix16_En8
  wire signed [15:0] Constant4_out1;  // sfix16_En8
  wire signed [15:0] Switch1_out1;  // sfix16_En8


  assign Sum_of_Elements_stage2_add_temp = g_e_0 + g_e_1;
  assign Sum_of_Elements_op_stage1 = {Sum_of_Elements_stage2_add_temp[31], Sum_of_Elements_stage2_add_temp};



  assign Sum_of_Elements_stage3_add_cast = Sum_of_Elements_op_stage1[31:0];
  assign Sum_of_Elements_stage3_add_temp = Sum_of_Elements_stage3_add_cast + g_e_2;
  assign Sum_of_Elements_op_stage2 = {{2{Sum_of_Elements_stage3_add_temp[31]}}, Sum_of_Elements_stage3_add_temp};



  assign Sum_of_Elements_stage4_add_cast = Sum_of_Elements_op_stage2[31:0];
  assign Sum_of_Elements_stage4_add_temp = Sum_of_Elements_stage4_add_cast + g_e_3;
  assign Sum_of_Elements_op_stage3 = {{3{Sum_of_Elements_stage4_add_temp[31]}}, Sum_of_Elements_stage4_add_temp};



  assign Sum_of_Elements_stage5_add_cast = Sum_of_Elements_op_stage3[31:0];
  assign Sum_of_Elements_stage5_add_temp = Sum_of_Elements_stage5_add_cast + g_e_4;
  assign Sum_of_Elements_op_stage4 = {{4{Sum_of_Elements_stage5_add_temp[31]}}, Sum_of_Elements_stage5_add_temp};



  assign Sum_of_Elements_stage6_add_cast = Sum_of_Elements_op_stage4[31:0];
  assign Sum_of_Elements_stage6_add_temp = Sum_of_Elements_stage6_add_cast + g_e_5;
  assign Sum_of_Elements_op_stage5 = {{5{Sum_of_Elements_stage6_add_temp[31]}}, Sum_of_Elements_stage6_add_temp};



  assign Sum_of_Elements_stage7_add_cast = Sum_of_Elements_op_stage5[31:0];
  assign Sum_of_Elements_stage7_add_temp = Sum_of_Elements_stage7_add_cast + g_e_6;
  assign Sum_of_Elements_op_stage6 = {{6{Sum_of_Elements_stage7_add_temp[31]}}, Sum_of_Elements_stage7_add_temp};



  assign Sum_of_Elements_stage8_add_cast = Sum_of_Elements_op_stage6[31:0];
  assign Sum_of_Elements_out1 = Sum_of_Elements_stage8_add_cast + g_e_7;



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 3
  assign count_step = 8'b00000001;



  assign count_from = 8'b00000000;



  assign Constant3_out1 = 16'sb1011111100000000;



  assign Constant1_out1 = 16'sb0000000000000000;



  assign Sum_of_Elements1_stage2_add_cast = {{16{g_i_0[15]}}, g_i_0};
  assign Sum_of_Elements1_stage2_add_cast_1 = {{16{g_i_1[15]}}, g_i_1};
  assign Sum_of_Elements1_stage2_add_temp = Sum_of_Elements1_stage2_add_cast + Sum_of_Elements1_stage2_add_cast_1;
  assign Sum_of_Elements1_op_stage1 = Sum_of_Elements1_stage2_add_temp[16:0];



  assign Sum_of_Elements1_stage3_add_cast = {{15{Sum_of_Elements1_op_stage1[16]}}, Sum_of_Elements1_op_stage1};
  assign Sum_of_Elements1_stage3_add_cast_1 = {{16{g_i_2[15]}}, g_i_2};
  assign Sum_of_Elements1_stage3_add_temp = Sum_of_Elements1_stage3_add_cast + Sum_of_Elements1_stage3_add_cast_1;
  assign Sum_of_Elements1_op_stage2 = Sum_of_Elements1_stage3_add_temp[17:0];



  assign Sum_of_Elements1_stage4_add_cast = {{14{Sum_of_Elements1_op_stage2[17]}}, Sum_of_Elements1_op_stage2};
  assign Sum_of_Elements1_stage4_add_cast_1 = {{16{g_i_3[15]}}, g_i_3};
  assign Sum_of_Elements1_stage4_add_temp = Sum_of_Elements1_stage4_add_cast + Sum_of_Elements1_stage4_add_cast_1;
  assign Sum_of_Elements1_op_stage3 = Sum_of_Elements1_stage4_add_temp[18:0];



  assign Sum_of_Elements1_stage5_add_cast = {{13{Sum_of_Elements1_op_stage3[18]}}, Sum_of_Elements1_op_stage3};
  assign Sum_of_Elements1_stage5_add_cast_1 = {{16{g_i_4[15]}}, g_i_4};
  assign Sum_of_Elements1_stage5_add_temp = Sum_of_Elements1_stage5_add_cast + Sum_of_Elements1_stage5_add_cast_1;
  assign Sum_of_Elements1_op_stage4 = Sum_of_Elements1_stage5_add_temp[19:0];



  assign Sum_of_Elements1_stage6_add_cast = {{12{Sum_of_Elements1_op_stage4[19]}}, Sum_of_Elements1_op_stage4};
  assign Sum_of_Elements1_stage6_add_cast_1 = {{16{g_i_5[15]}}, g_i_5};
  assign Sum_of_Elements1_stage6_add_temp = Sum_of_Elements1_stage6_add_cast + Sum_of_Elements1_stage6_add_cast_1;
  assign Sum_of_Elements1_op_stage5 = Sum_of_Elements1_stage6_add_temp[20:0];



  assign Sum_of_Elements1_stage7_add_cast = {{11{Sum_of_Elements1_op_stage5[20]}}, Sum_of_Elements1_op_stage5};
  assign Sum_of_Elements1_stage7_add_cast_1 = {{16{g_i_6[15]}}, g_i_6};
  assign Sum_of_Elements1_stage7_add_temp = Sum_of_Elements1_stage7_add_cast + Sum_of_Elements1_stage7_add_cast_1;
  assign Sum_of_Elements1_op_stage6 = Sum_of_Elements1_stage7_add_temp[21:0];



  assign Sum_of_Elements1_stage8_add_cast = {{10{Sum_of_Elements1_op_stage6[21]}}, Sum_of_Elements1_op_stage6};
  assign Sum_of_Elements1_stage8_add_cast_1 = {{16{g_i_7[15]}}, g_i_7};
  assign Sum_of_Elements1_stage8_add_temp = Sum_of_Elements1_stage8_add_cast + Sum_of_Elements1_stage8_add_cast_1;
  assign Sum_of_Elements1_out1 = Sum_of_Elements1_stage8_add_temp[15:0];



  assign Constant2_out1 = 16'sb1011101000000000;



  assign Constant_out1 = 16'sb1011111100000000;



  assign Add2_sub_cast = {{16{v_past[15]}}, v_past};
  assign Add2_sub_cast_1 = {{16{Constant_out1[15]}}, Constant_out1};
  assign Add2_sub_temp = Add2_sub_cast - Add2_sub_cast_1;
  assign Add2_out1 = Add2_sub_temp[15:0];



  assign Add4_sub_cast = {{16{v_past[15]}}, v_past};
  assign Add4_sub_cast_1 = {{16{Constant2_out1[15]}}, Constant2_out1};
  assign Add4_sub_temp = Add4_sub_cast - Add4_sub_cast_1;
  assign Add4_out1 = Add4_sub_temp[15:0];



  assign Product1_out1 = Sum_of_Elements1_out1 * Add4_out1;



  assign Gain2_out1 = 32'sb01100110011001100110011001100110 * Product1_out1;



  assign count = Refractory_Counter_out1 + count_step;



  assign need_to_wrap = Refractory_Counter_out1 == 8'b00000011;



  assign count_value = (need_to_wrap == 1'b0 ? count :
              count_from);



  assign Refractory_Counter_out1_is_not0 = Refractory_Counter_out1 != 8'b00000000;



  assign Logical_Operator_out1 = Compare_To_Constant_out1 | Refractory_Counter_out1_is_not0;



  assign count_1 = (Logical_Operator_out1 == 1'b0 ? Refractory_Counter_out1 :
              count_value);



  always @(posedge clk or posedge reset)
    begin : Refractory_Counter_process
      if (reset == 1'b1) begin
        Refractory_Counter_out1 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Refractory_Counter_out1 <= count_1;
        end
      end
    end



  assign switch_compare_1 = Refractory_Counter_out1 > 8'b00000000;



  assign Switch_out1 = (switch_compare_1 == 1'b0 ? v :
              Constant3_out1);



  always @(posedge clk or posedge reset)
    begin : Delay_process
      if (reset == 1'b1) begin
        v_past <= 16'sb1011111100000000;
      end
      else begin
        if (enb) begin
          v_past <= Switch_out1;
        end
      end
    end



  assign Add3_sub_cast = {{16{v_past[15]}}, v_past};
  assign Add3_sub_cast_1 = {{16{Constant1_out1[15]}}, Constant1_out1};
  assign Add3_sub_temp = Add3_sub_cast - Add3_sub_cast_1;
  assign Add3_out1 = Add3_sub_temp[15:0];



  assign Product_out1 = Sum_of_Elements_out1 * Add3_out1;



  assign Gain1_out1 = 48'sh666666666666 * Product_out1;



  assign Add1_stage2_cast = {Gain1_out1[95], Gain1_out1[95:1]};
  assign Add1_stage2_cast_1 =  - (Add1_stage2_cast);
  assign Add1_stage2_sub_cast = {Gain2_out1, 32'b00000000000000000000000000000000};
  assign Add1_stage2_sub_temp = Add1_stage2_cast_1 - Add1_stage2_sub_cast;
  assign Add1_op_stage1 = {Add1_stage2_sub_temp[95], {Add1_stage2_sub_temp, 1'b0}};



  assign Add1_stage3_sub_cast = Add1_op_stage1[96:1];
  assign Add1_stage3_sub_cast_1 = {{7{Add2_out1[15]}}, {Add2_out1, 73'b0000000000000000000000000000000000000000000000000000000000000000000000000}};
  assign Add1_out1 = Add1_stage3_sub_cast - Add1_stage3_sub_cast_1;



  assign Gain_mul_temp = 96'sh4189374BC6A7F00000000000 * Add1_out1;
  assign Gain_out1 = Gain_mul_temp[191:176];



  assign Add_add_cast = {{16{Gain_out1[15]}}, Gain_out1};
  assign Add_add_cast_1 = {{16{v_past[15]}}, v_past};
  assign Add_add_temp = Add_add_cast + Add_add_cast_1;
  assign v = Add_add_temp[15:0];



  Compare_To_Constant_block15 u_Compare_To_Constant (.u(v),  // sfix16_En8
                                                     .y(Compare_To_Constant_out1)
                                                     );

  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 2
  assign count_step_1 = 8'b00000001;



  assign count_from_1 = 8'b00000000;



  assign count_2 = HDL_Counter1_out1 + count_step_1;



  assign need_to_wrap_1 = HDL_Counter1_out1 == 8'b00000010;



  assign count_value_1 = (need_to_wrap_1 == 1'b0 ? count_2 :
              count_from_1);



  assign HDL_Counter1_out1_is_not0 = HDL_Counter1_out1 != 8'b00000000;



  assign Logical_Operator2_out1 = Compare_To_Constant_out1 | HDL_Counter1_out1_is_not0;



  assign count_3 = (Logical_Operator2_out1 == 1'b0 ? HDL_Counter1_out1 :
              count_value_1);



  always @(posedge clk or posedge reset)
    begin : HDL_Counter1_process
      if (reset == 1'b1) begin
        HDL_Counter1_out1 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          HDL_Counter1_out1 <= count_3;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= Compare_To_Constant_out1;
        end
      end
    end



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 201
  assign count_step_2 = 8'b00000001;



  assign count_from_2 = 8'b00000000;



  assign count_reset = 8'b00000000;



  assign count_4 = HDL_Counter_out1 + count_step_2;



  assign need_to_wrap_2 = HDL_Counter_out1 == 8'b11001001;



  assign count_value_2 = (need_to_wrap_2 == 1'b0 ? count_4 :
              count_from_2);



  assign HDL_Counter_out1_is_not0 = HDL_Counter_out1 != 8'b00000000;



  assign Logical_Operator1_out1 = Delay1_out1 | HDL_Counter_out1_is_not0;



  assign count_5 = (Logical_Operator1_out1 == 1'b0 ? HDL_Counter_out1 :
              count_value_2);



  assign count_6 = (Compare_To_Constant_out1 == 1'b0 ? count_5 :
              count_reset);



  always @(posedge clk or posedge reset)
    begin : HDL_Counter_process
      if (reset == 1'b1) begin
        HDL_Counter_out1 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          HDL_Counter_out1 <= count_6;
        end
      end
    end



  assign switch_compare_1_1 = HDL_Counter1_out1 > 8'b00000000;



  assign prelookup_idx = (HDL_Counter_out1 == 8'b00000000 ? 8'b00000000 :
              (HDL_Counter_out1 >= 8'b11001001 ? 8'b11001001 :
              HDL_Counter_out1));



  assign alpha1_D_Lookup_Table_1[0] = 16'sb0000000000000000;
  assign alpha1_D_Lookup_Table_1[1] = 16'sb0010100000000000;
  assign alpha1_D_Lookup_Table_1[2] = 16'sb0010011100110101;
  assign alpha1_D_Lookup_Table_1[3] = 16'sb0010011001101110;
  assign alpha1_D_Lookup_Table_1[4] = 16'sb0010010110101100;
  assign alpha1_D_Lookup_Table_1[5] = 16'sb0010010011101101;
  assign alpha1_D_Lookup_Table_1[6] = 16'sb0010010000110010;
  assign alpha1_D_Lookup_Table_1[7] = 16'sb0010001101111010;
  assign alpha1_D_Lookup_Table_1[8] = 16'sb0010001011000110;
  assign alpha1_D_Lookup_Table_1[9] = 16'sb0010001000010110;
  assign alpha1_D_Lookup_Table_1[10] = 16'sb0010000101101001;
  assign alpha1_D_Lookup_Table_1[11] = 16'sb0010000011000000;
  assign alpha1_D_Lookup_Table_1[12] = 16'sb0010000000011010;
  assign alpha1_D_Lookup_Table_1[13] = 16'sb0001111101110111;
  assign alpha1_D_Lookup_Table_1[14] = 16'sb0001111011011000;
  assign alpha1_D_Lookup_Table_1[15] = 16'sb0001111000111011;
  assign alpha1_D_Lookup_Table_1[16] = 16'sb0001110110100010;
  assign alpha1_D_Lookup_Table_1[17] = 16'sb0001110100001100;
  assign alpha1_D_Lookup_Table_1[18] = 16'sb0001110001111001;
  assign alpha1_D_Lookup_Table_1[19] = 16'sb0001101111101000;
  assign alpha1_D_Lookup_Table_1[20] = 16'sb0001101101011011;
  assign alpha1_D_Lookup_Table_1[21] = 16'sb0001101011010000;
  assign alpha1_D_Lookup_Table_1[22] = 16'sb0001101001001000;
  assign alpha1_D_Lookup_Table_1[23] = 16'sb0001100111000011;
  assign alpha1_D_Lookup_Table_1[24] = 16'sb0001100101000000;
  assign alpha1_D_Lookup_Table_1[25] = 16'sb0001100011000000;
  assign alpha1_D_Lookup_Table_1[26] = 16'sb0001100001000011;
  assign alpha1_D_Lookup_Table_1[27] = 16'sb0001011111001000;
  assign alpha1_D_Lookup_Table_1[28] = 16'sb0001011101001111;
  assign alpha1_D_Lookup_Table_1[29] = 16'sb0001011011011001;
  assign alpha1_D_Lookup_Table_1[30] = 16'sb0001011001100101;
  assign alpha1_D_Lookup_Table_1[31] = 16'sb0001010111110100;
  assign alpha1_D_Lookup_Table_1[32] = 16'sb0001010110000101;
  assign alpha1_D_Lookup_Table_1[33] = 16'sb0001010100010111;
  assign alpha1_D_Lookup_Table_1[34] = 16'sb0001010010101101;
  assign alpha1_D_Lookup_Table_1[35] = 16'sb0001010001000100;
  assign alpha1_D_Lookup_Table_1[36] = 16'sb0001001111011101;
  assign alpha1_D_Lookup_Table_1[37] = 16'sb0001001101111000;
  assign alpha1_D_Lookup_Table_1[38] = 16'sb0001001100010110;
  assign alpha1_D_Lookup_Table_1[39] = 16'sb0001001010110101;
  assign alpha1_D_Lookup_Table_1[40] = 16'sb0001001001010110;
  assign alpha1_D_Lookup_Table_1[41] = 16'sb0001000111111001;
  assign alpha1_D_Lookup_Table_1[42] = 16'sb0001000110011110;
  assign alpha1_D_Lookup_Table_1[43] = 16'sb0001000101000101;
  assign alpha1_D_Lookup_Table_1[44] = 16'sb0001000011101101;
  assign alpha1_D_Lookup_Table_1[45] = 16'sb0001000010010111;
  assign alpha1_D_Lookup_Table_1[46] = 16'sb0001000001000011;
  assign alpha1_D_Lookup_Table_1[47] = 16'sb0000111111110001;
  assign alpha1_D_Lookup_Table_1[48] = 16'sb0000111110100000;
  assign alpha1_D_Lookup_Table_1[49] = 16'sb0000111101010001;
  assign alpha1_D_Lookup_Table_1[50] = 16'sb0000111100000011;
  assign alpha1_D_Lookup_Table_1[51] = 16'sb0000111010110111;
  assign alpha1_D_Lookup_Table_1[52] = 16'sb0000111001101100;
  assign alpha1_D_Lookup_Table_1[53] = 16'sb0000111000100011;
  assign alpha1_D_Lookup_Table_1[54] = 16'sb0000110111011100;
  assign alpha1_D_Lookup_Table_1[55] = 16'sb0000110110010101;
  assign alpha1_D_Lookup_Table_1[56] = 16'sb0000110101010001;
  assign alpha1_D_Lookup_Table_1[57] = 16'sb0000110100001101;
  assign alpha1_D_Lookup_Table_1[58] = 16'sb0000110011001011;
  assign alpha1_D_Lookup_Table_1[59] = 16'sb0000110010001010;
  assign alpha1_D_Lookup_Table_1[60] = 16'sb0000110001001011;
  assign alpha1_D_Lookup_Table_1[61] = 16'sb0000110000001100;
  assign alpha1_D_Lookup_Table_1[62] = 16'sb0000101111001111;
  assign alpha1_D_Lookup_Table_1[63] = 16'sb0000101110010011;
  assign alpha1_D_Lookup_Table_1[64] = 16'sb0000101101011001;
  assign alpha1_D_Lookup_Table_1[65] = 16'sb0000101100011111;
  assign alpha1_D_Lookup_Table_1[66] = 16'sb0000101011100111;
  assign alpha1_D_Lookup_Table_1[67] = 16'sb0000101010101111;
  assign alpha1_D_Lookup_Table_1[68] = 16'sb0000101001111001;
  assign alpha1_D_Lookup_Table_1[69] = 16'sb0000101001000100;
  assign alpha1_D_Lookup_Table_1[70] = 16'sb0000101000010000;
  assign alpha1_D_Lookup_Table_1[71] = 16'sb0000100111011101;
  assign alpha1_D_Lookup_Table_1[72] = 16'sb0000100110101011;
  assign alpha1_D_Lookup_Table_1[73] = 16'sb0000100101111010;
  assign alpha1_D_Lookup_Table_1[74] = 16'sb0000100101001010;
  assign alpha1_D_Lookup_Table_1[75] = 16'sb0000100100011011;
  assign alpha1_D_Lookup_Table_1[76] = 16'sb0000100011101101;
  assign alpha1_D_Lookup_Table_1[77] = 16'sb0000100011000000;
  assign alpha1_D_Lookup_Table_1[78] = 16'sb0000100010010011;
  assign alpha1_D_Lookup_Table_1[79] = 16'sb0000100001101000;
  assign alpha1_D_Lookup_Table_1[80] = 16'sb0000100000111101;
  assign alpha1_D_Lookup_Table_1[81] = 16'sb0000100000010011;
  assign alpha1_D_Lookup_Table_1[82] = 16'sb0000011111101010;
  assign alpha1_D_Lookup_Table_1[83] = 16'sb0000011111000010;
  assign alpha1_D_Lookup_Table_1[84] = 16'sb0000011110011011;
  assign alpha1_D_Lookup_Table_1[85] = 16'sb0000011101110100;
  assign alpha1_D_Lookup_Table_1[86] = 16'sb0000011101001111;
  assign alpha1_D_Lookup_Table_1[87] = 16'sb0000011100101010;
  assign alpha1_D_Lookup_Table_1[88] = 16'sb0000011100000101;
  assign alpha1_D_Lookup_Table_1[89] = 16'sb0000011011100010;
  assign alpha1_D_Lookup_Table_1[90] = 16'sb0000011010111111;
  assign alpha1_D_Lookup_Table_1[91] = 16'sb0000011010011101;
  assign alpha1_D_Lookup_Table_1[92] = 16'sb0000011001111011;
  assign alpha1_D_Lookup_Table_1[93] = 16'sb0000011001011010;
  assign alpha1_D_Lookup_Table_1[94] = 16'sb0000011000111010;
  assign alpha1_D_Lookup_Table_1[95] = 16'sb0000011000011011;
  assign alpha1_D_Lookup_Table_1[96] = 16'sb0000010111111100;
  assign alpha1_D_Lookup_Table_1[97] = 16'sb0000010111011101;
  assign alpha1_D_Lookup_Table_1[98] = 16'sb0000010111000000;
  assign alpha1_D_Lookup_Table_1[99] = 16'sb0000010110100010;
  assign alpha1_D_Lookup_Table_1[100] = 16'sb0000010110000110;
  assign alpha1_D_Lookup_Table_1[101] = 16'sb0000010101101010;
  assign alpha1_D_Lookup_Table_1[102] = 16'sb0000010101001110;
  assign alpha1_D_Lookup_Table_1[103] = 16'sb0000010100110011;
  assign alpha1_D_Lookup_Table_1[104] = 16'sb0000010100011001;
  assign alpha1_D_Lookup_Table_1[105] = 16'sb0000010011111111;
  assign alpha1_D_Lookup_Table_1[106] = 16'sb0000010011100110;
  assign alpha1_D_Lookup_Table_1[107] = 16'sb0000010011001101;
  assign alpha1_D_Lookup_Table_1[108] = 16'sb0000010010110101;
  assign alpha1_D_Lookup_Table_1[109] = 16'sb0000010010011101;
  assign alpha1_D_Lookup_Table_1[110] = 16'sb0000010010000110;
  assign alpha1_D_Lookup_Table_1[111] = 16'sb0000010001101111;
  assign alpha1_D_Lookup_Table_1[112] = 16'sb0000010001011000;
  assign alpha1_D_Lookup_Table_1[113] = 16'sb0000010001000010;
  assign alpha1_D_Lookup_Table_1[114] = 16'sb0000010000101101;
  assign alpha1_D_Lookup_Table_1[115] = 16'sb0000010000010111;
  assign alpha1_D_Lookup_Table_1[116] = 16'sb0000010000000011;
  assign alpha1_D_Lookup_Table_1[117] = 16'sb0000001111101110;
  assign alpha1_D_Lookup_Table_1[118] = 16'sb0000001111011010;
  assign alpha1_D_Lookup_Table_1[119] = 16'sb0000001111000111;
  assign alpha1_D_Lookup_Table_1[120] = 16'sb0000001110110100;
  assign alpha1_D_Lookup_Table_1[121] = 16'sb0000001110100001;
  assign alpha1_D_Lookup_Table_1[122] = 16'sb0000001110001111;
  assign alpha1_D_Lookup_Table_1[123] = 16'sb0000001101111101;
  assign alpha1_D_Lookup_Table_1[124] = 16'sb0000001101101011;
  assign alpha1_D_Lookup_Table_1[125] = 16'sb0000001101011010;
  assign alpha1_D_Lookup_Table_1[126] = 16'sb0000001101001001;
  assign alpha1_D_Lookup_Table_1[127] = 16'sb0000001100111000;
  assign alpha1_D_Lookup_Table_1[128] = 16'sb0000001100101000;
  assign alpha1_D_Lookup_Table_1[129] = 16'sb0000001100011000;
  assign alpha1_D_Lookup_Table_1[130] = 16'sb0000001100001000;
  assign alpha1_D_Lookup_Table_1[131] = 16'sb0000001011111001;
  assign alpha1_D_Lookup_Table_1[132] = 16'sb0000001011101010;
  assign alpha1_D_Lookup_Table_1[133] = 16'sb0000001011011011;
  assign alpha1_D_Lookup_Table_1[134] = 16'sb0000001011001100;
  assign alpha1_D_Lookup_Table_1[135] = 16'sb0000001010111110;
  assign alpha1_D_Lookup_Table_1[136] = 16'sb0000001010110000;
  assign alpha1_D_Lookup_Table_1[137] = 16'sb0000001010100011;
  assign alpha1_D_Lookup_Table_1[138] = 16'sb0000001010010101;
  assign alpha1_D_Lookup_Table_1[139] = 16'sb0000001010001000;
  assign alpha1_D_Lookup_Table_1[140] = 16'sb0000001001111011;
  assign alpha1_D_Lookup_Table_1[141] = 16'sb0000001001101111;
  assign alpha1_D_Lookup_Table_1[142] = 16'sb0000001001100010;
  assign alpha1_D_Lookup_Table_1[143] = 16'sb0000001001010110;
  assign alpha1_D_Lookup_Table_1[144] = 16'sb0000001001001010;
  assign alpha1_D_Lookup_Table_1[145] = 16'sb0000001000111111;
  assign alpha1_D_Lookup_Table_1[146] = 16'sb0000001000110011;
  assign alpha1_D_Lookup_Table_1[147] = 16'sb0000001000101000;
  assign alpha1_D_Lookup_Table_1[148] = 16'sb0000001000011101;
  assign alpha1_D_Lookup_Table_1[149] = 16'sb0000001000010011;
  assign alpha1_D_Lookup_Table_1[150] = 16'sb0000001000001000;
  assign alpha1_D_Lookup_Table_1[151] = 16'sb0000000111111110;
  assign alpha1_D_Lookup_Table_1[152] = 16'sb0000000111110100;
  assign alpha1_D_Lookup_Table_1[153] = 16'sb0000000111101010;
  assign alpha1_D_Lookup_Table_1[154] = 16'sb0000000111100000;
  assign alpha1_D_Lookup_Table_1[155] = 16'sb0000000111010111;
  assign alpha1_D_Lookup_Table_1[156] = 16'sb0000000111001101;
  assign alpha1_D_Lookup_Table_1[157] = 16'sb0000000111000100;
  assign alpha1_D_Lookup_Table_1[158] = 16'sb0000000110111011;
  assign alpha1_D_Lookup_Table_1[159] = 16'sb0000000110110010;
  assign alpha1_D_Lookup_Table_1[160] = 16'sb0000000110101010;
  assign alpha1_D_Lookup_Table_1[161] = 16'sb0000000110100001;
  assign alpha1_D_Lookup_Table_1[162] = 16'sb0000000110011001;
  assign alpha1_D_Lookup_Table_1[163] = 16'sb0000000110010001;
  assign alpha1_D_Lookup_Table_1[164] = 16'sb0000000110001001;
  assign alpha1_D_Lookup_Table_1[165] = 16'sb0000000110000001;
  assign alpha1_D_Lookup_Table_1[166] = 16'sb0000000101111010;
  assign alpha1_D_Lookup_Table_1[167] = 16'sb0000000101110010;
  assign alpha1_D_Lookup_Table_1[168] = 16'sb0000000101101011;
  assign alpha1_D_Lookup_Table_1[169] = 16'sb0000000101100100;
  assign alpha1_D_Lookup_Table_1[170] = 16'sb0000000101011101;
  assign alpha1_D_Lookup_Table_1[171] = 16'sb0000000101010110;
  assign alpha1_D_Lookup_Table_1[172] = 16'sb0000000101001111;
  assign alpha1_D_Lookup_Table_1[173] = 16'sb0000000101001000;
  assign alpha1_D_Lookup_Table_1[174] = 16'sb0000000101000010;
  assign alpha1_D_Lookup_Table_1[175] = 16'sb0000000100111011;
  assign alpha1_D_Lookup_Table_1[176] = 16'sb0000000100110101;
  assign alpha1_D_Lookup_Table_1[177] = 16'sb0000000100101111;
  assign alpha1_D_Lookup_Table_1[178] = 16'sb0000000100101001;
  assign alpha1_D_Lookup_Table_1[179] = 16'sb0000000100100011;
  assign alpha1_D_Lookup_Table_1[180] = 16'sb0000000100011101;
  assign alpha1_D_Lookup_Table_1[181] = 16'sb0000000100011000;
  assign alpha1_D_Lookup_Table_1[182] = 16'sb0000000100010010;
  assign alpha1_D_Lookup_Table_1[183] = 16'sb0000000100001101;
  assign alpha1_D_Lookup_Table_1[184] = 16'sb0000000100001000;
  assign alpha1_D_Lookup_Table_1[185] = 16'sb0000000100000010;
  assign alpha1_D_Lookup_Table_1[186] = 16'sb0000000011111101;
  assign alpha1_D_Lookup_Table_1[187] = 16'sb0000000011111000;
  assign alpha1_D_Lookup_Table_1[188] = 16'sb0000000011110011;
  assign alpha1_D_Lookup_Table_1[189] = 16'sb0000000011101110;
  assign alpha1_D_Lookup_Table_1[190] = 16'sb0000000011101010;
  assign alpha1_D_Lookup_Table_1[191] = 16'sb0000000011100101;
  assign alpha1_D_Lookup_Table_1[192] = 16'sb0000000011100001;
  assign alpha1_D_Lookup_Table_1[193] = 16'sb0000000011011100;
  assign alpha1_D_Lookup_Table_1[194] = 16'sb0000000011011000;
  assign alpha1_D_Lookup_Table_1[195] = 16'sb0000000011010011;
  assign alpha1_D_Lookup_Table_1[196] = 16'sb0000000011001111;
  assign alpha1_D_Lookup_Table_1[197] = 16'sb0000000011001011;
  assign alpha1_D_Lookup_Table_1[198] = 16'sb0000000011000111;
  assign alpha1_D_Lookup_Table_1[199] = 16'sb0000000011000011;
  assign alpha1_D_Lookup_Table_1[200] = 16'sb0000000010111111;
  assign alpha1_D_Lookup_Table_1[201] = 16'sb0000000010111100;
  assign alpha1_D_Lookup_Table_out1 = alpha1_D_Lookup_Table_1[prelookup_idx];



  assign Constant4_out1 = 16'sb0010100000000000;



  assign Switch1_out1 = (switch_compare_1_1 == 1'b0 ? alpha1_D_Lookup_Table_out1 :
              Constant4_out1);



  assign g = Switch1_out1;

endmodule  // HDPC8

